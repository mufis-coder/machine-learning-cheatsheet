plt.figure(figsize=(20, 10))

# define the mask to set the values in the upper triangle to True
mask = np.triu(np.ones_like(df_train.corr(), dtype=np.bool))
heatmap = sns.heatmap(df_train.corr(), mask=mask, vmin=-1, vmax=1, annot=True, cmap='BrBG')
heatmap.set_title('Triangle Correlation Heatmap', fontdict={'fontsize':18}, pad=16);






df_merged = df3.append([df2, df4], ignore_index=True)

df1['Model Type'] = 'SingleLearning'
df2['Model Type'] = 'EnsembleLearning'

df_train.isnull().sum()

columns = df.columns





train = train.reset_index(drop=True)
validation = validation.reset_index(drop=True)






df1.drop(columns=['Model Type'], inplace=True)
df1 = df1[df1['Model Name'].isin(['Elastic-Net', 'LightGBM', 'RandomForestRegressor', 'XGBoostRegressor', 'CatBoostRegressor', 'Decision Tree'])]
df1 = df1[df1['Train-Validation Dataset Source']=='1,2']


comRes = {"Model Name":[], "Tuning Status":[], "Train-Validation Dataset Source":[], "Test Dataset Source":[], 
          "Data Type":[], "Metric Type":[], "Y Target":[], "Value metric":[]}
for index, row in df.iterrows():
  modType = row['Tuning Status']
  modName = row['Model Name']
  trainValDataSrc = row['Train-Validation Dataset Source']
  testDataSrc = row['Test Dataset Source']
  for col in cols:
    colsNew = col.split("-")
    comRes["Tuning Status"].append(modType)
    comRes["Model Name"].append(modName)
    comRes["Train-Validation Dataset Source"].append(trainValDataSrc)
    comRes["Test Dataset Source"].append(testDataSrc)
    comRes["Data Type"].append(colsNew[0])
    comRes["Metric Type"].append(colsNew[1])
    comRes["Y Target"].append(colsNew[2])
    comRes["Value metric"].append(row[col])

dfDTTuned = dfDT[dfDT['Tuning Status']=='Tuned']



plt.figure(1 , figsize = (21, 15))
plt.subplot(2 , 3 , 1)
plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)
sns.barplot(data=dfMaeOrien[dfMaeOrien['Data Type']=='Train'], x="Model Type", y="Value metric", hue='Train-Validation Dataset Source', ci=None)
plt.title('MAE ORIENTATION: Train')
plt.ylim(0.0, 1.0)
plt.subplot(2 , 3 , 2)
plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)
sns.barplot(data=dfMaeOrien[dfMaeOrien['Data Type']=='Validation'], x="Model Type", y="Value metric", hue='Train-Validation Dataset Source', ci=None)
plt.title('MAE ORIENTATION: Validation')
plt.ylim(0.0, 1.0)
plt.subplot(2 , 3 , 3)
plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)
sns.barplot(data=dfMaeOrien[dfMaeOrien['Data Type']=='Test'], x="Model Type", y="Value metric", hue='Train-Validation Dataset Source', ci=None)
plt.title('MAE ORIENTATION: Test')
plt.ylim(0.0, 2.0)

plt.subplot(2 , 3 , 4)
plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)
sns.barplot(data=dfRmseOrien[dfRmseOrien['Data Type']=='Train'], x="Model Type", y="Value metric", hue='Train-Validation Dataset Source', ci=None)
plt.title('RMSE ORIENTATION: Train')
plt.ylim(0.0, 1.0)
plt.subplot(2, 3 , 5)
plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)
sns.barplot(data=dfRmseOrien[dfRmseOrien['Data Type']=='Validation'], x="Model Type", y="Value metric", hue='Train-Validation Dataset Source', ci=None)
plt.title('RMSE ORIENTATION: Validation')
plt.ylim(0.0, 1.0)
plt.subplot(2, 3 , 6)
plt.subplots_adjust(hspace = 0.5 , wspace = 0.5)
sns.barplot(data=dfRmseOrien[dfRmseOrien['Data Type']=='Test'], x="Model Type", y="Value metric", hue='Train-Validation Dataset Source', ci=None)
plt.title('RMSE ORIENTATION: Test')
plt.ylim(0.0, 2.0)

plt.show()


# scatter plotto
# Initialise the subplot function using number of rows and columns
figure, axis = plt.subplots(4, 3, figsize=(32,24))
for i,colname in enumerate(df.columns.values):
  row = i//3
  col = i%3
  axis[row, col].scatter(df[colname], df['ACCELEROMETER X (m/sÂ²)'])
  axis[row, col].set_title(f'ACCELEROMETER X (m/sÂ²) & {colname}')
  print("finish")